<Application x:Class="NewLaserProject.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:views="clr-namespace:NewLaserProject.Views"
             xmlns:dbmodels="clr-namespace:NewLaserProject.Data.Models"
             xmlns:viewmodels="clr-namespace:NewLaserProject.ViewModels"
             xmlns:dbviewmodels="clr-namespace:NewLaserProject.ViewModels.DbVM"
             xmlns:dialogvm="clr-namespace:NewLaserProject.ViewModels.DialogVM"
             xmlns:dialogviews ="clr-namespace:NewLaserProject.Views.Dialogs"            
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:hc="https://handyorg.github.io/handycontrol" 
             xmlns:entities ="clr-namespace:MachineClassLibrary.Laser.Entities;assembly=MachineClassLibrary"
             xmlns:selectors ="clr-namespace:NewLaserProject.Views.Selectors"
             xmlns:uc="clr-namespace:MachineControlsLibrary.Controls;assembly=MachineControlsLibrary"
             xmlns:Localconverters="clr-namespace:NewLaserProject.Views.Converters"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:clr="clr-namespace:System;assembly=mscorlib"
             xmlns:cnvrt="clr-namespace:MachineControlsLibrary.Converters;assembly=MachineControlsLibrary"
             >
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>                
                <!--<ResourceDictionary Source="pack://application:,,,/HandyControl;component/Themes/SkinViolet.xaml"/>-->
                <ResourceDictionary Source="pack://application:,,,/HandyControl;component/Themes/SkinDark.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/HandyControl;component/Themes/Theme.xaml"/>
                <ResourceDictionary Source="/Views/Dictionaries/Geometries.xaml"/>
                <ResourceDictionary Source="/Views/Dictionaries/Styles.xaml"/>
                <ResourceDictionary Source="/Views/Dictionaries/ProgBlockTemplates.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <Localconverters:AligningArgsConverter x:Key="AligningArgsConverters"/>
            <Localconverters:MechanicScaleConverter x:Key="MechanicScaleConverter"/>
            <Localconverters:IProcToGeometryConverter x:Key="IProcToGeometryConverter"/>
            <Localconverters:LayersTreeStructureConvereter x:Key="LTreeStructureConverter"/>
            <Localconverters:LayersStructureConvereter x:Key="LStructureConvereter"/>
            <Localconverters:TextToEntityConverter x:Key="TextToEntityConverter"/>
            <Localconverters:IProcTypeToEntityConverter x:Key="IProcTypeToEntityConverter"/>
            <Localconverters:GetLayerNameConverter x:Key="GetLayerNameConverter"/>
            <Localconverters:FileAlignmentConverter x:Key="FileAlignmentConverter"/>
            <Localconverters:KeyProcessorArgsConverter x:Key="KeyProcessorArgsConverter"/>
            <Localconverters:MouseEventArgsConverter x:Key="MouseEventArgsConverter"/>
            <Localconverters:PointSpecWinConverter x:Key="PointSpecWinConverter"/>
            <Localconverters:MarkPositionConverter x:Key="MarkPositionConverter"/>
            <Localconverters:GetDictValueConverter x:Key="GetDictValueConverter"/>
            <Localconverters:CountToVisibilityConverter x:Key="CountToVisibilityConverter"/>
            <Localconverters:EnumToIntConverter x:Key="EnumToIntConverter"/>
            <cnvrt:DivideConverter x:Key="DivideConverter"/>
            <cnvrt:MulConvereter x:Key="MulConvereter"/>
            <clr:Boolean x:Key="TRUE">True</clr:Boolean>
            <clr:Boolean x:Key="FALSE">False</clr:Boolean>


            <selectors:LaserEntityDataSelector x:Key="EntitySelector"/>
            <selectors:AligningTypeDataSelector x:Key="AligningSelector"/>

            <DataTemplate DataType="{x:Type viewmodels:MechanicVM}">
                <views:MechanicView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:WorkTimeStatisticsVM}">
                <views:WorkTimeStatisticsView/>
            </DataTemplate>
            
            <!--<DataTemplate DataType="{x:Type dialogvm:AskThicknessVM}">
                
            </DataTemplate>-->
            
            <DataTemplate DataType="{x:Type dialogvm:WaferVM}">
                <dialogviews:WaferSettingsView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type dialogvm:AddProcObjectsVM}">
                <dialogviews:AddObjectForProcessingView/>
            </DataTemplate>
            
            <DataTemplate DataType="{x:Type dialogvm:MaterialVM}">
                <dialogviews:MaterialSettingsView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type dialogvm:MaterialEntRuleVM}">
                <dialogviews:MaterialEntRuleView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type dialogvm:AskThicknessVM}">
                <hc:NumericUpDown hc:TitleElement.Title="Толщина подложки" 
                                  hc:TitleElement.TitlePlacement="Left" 
                                  Minimum="0.1"
                                  Maximum="5"
                                  Increment="0.05"
                                  ValueFormat="N3"
                                  Value="{Binding Thickness}"
                                  Style="{StaticResource NumericUpDownExtend}"/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type dialogvm:MarkSettingsVM}">
                <dialogviews:PenHatchSettingsView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type dialogvm:SpecimenSettingsVM}">
                <dialogviews:SpecimenSettingsView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type dialogvm:MachineSettingsVM}">
                <dialogviews:MachineSettingsView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type dialogvm:EditExtendedParamsVM}">
                <dialogviews:ExtendedMarkParamsView/>
            </DataTemplate>
            
            <DataTemplate DataType="{x:Type dialogvm:FileViewDialogVM}">
                <dialogviews:FileSettingsView/>
            </DataTemplate>
           
            <DataTemplate DataType="{x:Type viewmodels:LayersProcessingModel}">
                <views:LayerWizardTree/>
            </DataTemplate>
            
            <DataTemplate DataType="{x:Type viewmodels:LaserDbViewModel}">
                <views:LaserTechnologiesView/>
            </DataTemplate> 
            
            
            <DataTemplate x:Key="techWizardTemplate" DataType="{x:Type dialogvm:TechWizardVM}">
                <dialogviews:LayerWizardProgramView/>
            </DataTemplate>

            <DataTemplate DataType="{x:Type dbviewmodels:WriteTechnologyVM}">
                <Grid>
                    <DockPanel>
                        <dialogviews:WriteEditTechnologyView DockPanel.Dock="Top"/>
                        <ContentControl ContentTemplate="{StaticResource techWizardTemplate}" Content="{Binding}"/>
                    </DockPanel>
                </Grid>
            </DataTemplate>

            <!--<DataTemplate DataType="{x:Type dbviewmodels:WriteTechnologyVM}">
                <dialogviews:WETechView/>
            </DataTemplate>-->

            <DataTemplate DataType="{x:Type viewmodels:FileVM}">
                <views:FileView/>                
            </DataTemplate>

            <DataTemplate DataType="{x:Type viewmodels:CameraVM}">
                <views:CameraView/>
            </DataTemplate>
            
            <DataTemplate x:Key="Nothing">
                <Grid/>
            </DataTemplate>

            <DataTemplate x:Key="LaserCircleDataTemplate" DataType="{x:Type entities:PCircle}">
                <Path Data="{StaticResource CircleGeometry}" Stretch="Uniform" Stroke="{DynamicResource AccentBrush}" StrokeThickness="0.7">
                    <Path.LayoutTransform>
                        <ScaleTransform ScaleX="1" ScaleY="-1"/>
                    </Path.LayoutTransform>
                </Path>
            </DataTemplate>

            <DataTemplate x:Key="LaserCurveDataTemplate" DataType="{x:Type entities:PCurve}">
                <Path Data="{StaticResource CurveGeometry}" Stretch="Uniform" Stroke="{DynamicResource AccentBrush}" StrokeThickness="1">
                    <Path.LayoutTransform>
                        <ScaleTransform ScaleX="1" ScaleY="-1"/>
                    </Path.LayoutTransform>
                </Path>
            </DataTemplate>

            <DataTemplate x:Key="HatchLoopInTemplate">
                <Path Data="{StaticResource HatchLoopINGeometry}" 
                      Stretch="Uniform" 
                      Stroke="{StaticResource PrimaryTextBrush}" 
                      Fill="{StaticResource TextIconBrush}"
                      StrokeThickness="0.1">
                </Path>
            </DataTemplate>

            <DataTemplate x:Key="HatchLoopOutTemplate">
                <Path Data="{StaticResource HatchLoopOUTGeometry}" 
                      Stretch="Uniform"
                      Stroke="{StaticResource PrimaryTextBrush}" 
                      Fill="{StaticResource TextIconBrush}"
                      StrokeThickness="0.1">
                </Path>
            </DataTemplate>

            <DataTemplate x:Key="CrossHatchTemplate">
                <Path Data="{StaticResource CrossHatchGeometry}" 
                      Stretch="Uniform"
                      Stroke="{StaticResource PrimaryTextBrush}" 
                      Fill="{StaticResource TextIconBrush}"
                      StrokeThickness="0.1">
                </Path>
            </DataTemplate>

            <DataTemplate x:Key="LaserLineDataTemplate" DataType="{x:Type entities:PLine}">
                <Path Data="{StaticResource LineGeometry}" Stretch="Uniform" Stroke="{DynamicResource AccentBrush}" StrokeThickness="2">
                    <Path.LayoutTransform>
                        <ScaleTransform ScaleX="1" ScaleY="-1"/>
                    </Path.LayoutTransform>
                </Path>
            </DataTemplate>

            <DataTemplate x:Key="LaserPointDataTemplate" DataType="{x:Type entities:PPoint}">
                <Path Data="{StaticResource PointGeometry}" Stretch="Uniform" Fill="{DynamicResource AccentBrush}">
                    <Path.LayoutTransform>
                        <ScaleTransform ScaleX="1" ScaleY="-1"/>
                    </Path.LayoutTransform>
                </Path>
            </DataTemplate>

            <DataTemplate x:Key="AlignByCornerDataTemplate" DataType="{x:Type sys:Enum}">
                <Path Data="{StaticResource AlignByAngleGeometry}" Stretch="Uniform" Fill="{DynamicResource AccentBrush}">
                    <Path.LayoutTransform>
                        <ScaleTransform ScaleX="1" ScaleY="-1"/>
                    </Path.LayoutTransform>
                </Path>
            </DataTemplate>

            <DataTemplate x:Key="AlignByThreePointDataTemplate" DataType="{x:Type sys:Enum}">
                <Path Data="{StaticResource AlignByThreePointGeometry}" Stretch="Uniform" Fill="{DynamicResource AccentBrush}" StrokeThickness="2" Stroke="{DynamicResource AccentBrush}">
                    <Path.LayoutTransform>
                        <ScaleTransform ScaleX="1" ScaleY="-1"/>
                    </Path.LayoutTransform>
                </Path>
            </DataTemplate>

            <DataTemplate x:Key="AlignByTwoPointDataTemplate" DataType="{x:Type sys:Enum}">
                <Path Data="{StaticResource AlignByTwoPointGeometry}" Stretch="Uniform" Fill="{DynamicResource AccentBrush}" StrokeThickness="2" Stroke="{DynamicResource AccentBrush}">
                    <Path.LayoutTransform>
                        <ScaleTransform ScaleX="1" ScaleY="-1"/>
                    </Path.LayoutTransform>
                </Path>
            </DataTemplate>

            


            <DataTemplate DataType="{x:Type viewmodels:SnapShot}">
                <Border BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="2"
                        Padding="4"
                        Background="{StaticResource SecondaryBorderBrush}"
                        CornerRadius="4"
                        >
                    <Grid Background="Black"
                          ClipToBounds="True"
                          >
                        <uc:SpecimenWindow
                            LayGeoms="{Binding LayGeoms}"
                            FieldSizeX="{Binding FieldSizeX}"
                            FieldSizeY="{Binding FieldSizeY}"
                            SpecSizeX="{Binding SpecSizeX}"
                            SpecSizeY="{Binding SpecSizeY}"
                            MirrorX="{Binding MirrorX}"
                            Angle="{Binding Angle}"
                            AutoProportion="True"
                            SpecMargin="0"
                            IsLoading="{Binding LayGeomsLoading}"
                            />
                        <uc:SpecimenWindow
                            FieldSizeX="{Binding FieldSizeX}"
                            FieldSizeY="{Binding FieldSizeY}"
                            SpecSizeX="{Binding SpecSizeX}"
                            SpecSizeY="{Binding SpecSizeY}"
                            MirrorX="{Binding MirrorX}"
                            Angle="{Binding Angle}"
                            AutoProportion="True"
                            SpecMargin="0"
                            IsFillPath="True"
                            LightPathModeOn="True"
                            >
                            <uc:SpecimenWindow.LayGeoms>
                                <MultiBinding Converter="{StaticResource PointSpecWinConverter}">
                                    <Binding Path="GeomPoints"/>
                                    <Binding Path="Scale"/>
                                </MultiBinding>
                            </uc:SpecimenWindow.LayGeoms>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="OnGeometryClickEvent">
                                    <i:InvokeCommandAction Command="{Binding GotPointCommand}" 
                                                           PassEventArgsToCommand="True"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </uc:SpecimenWindow>
                    </Grid>
                </Border>
            </DataTemplate>

            <DataTemplate DataType="{x:Type dbmodels:MaterialEntRule}">
                <StackPanel>
                    <hc:NumericUpDown Value="{Binding Offset}"
                                      ValueFormat="N3" 
                                      Maximum="2" 
                                      Minimum="-2"
                                      Increment="0.01"
                                      hc:InfoElement.TitleWidth="160" 
                                      hc:InfoElement.Placeholder="Please enter the content" 
                                      hc:InfoElement.TitlePlacement="Left" 
                                      hc:InfoElement.Title="Смещение от контура, мм" 
                                      Style="{StaticResource NumericUpDownExtend}" 
                                      Margin="0,3,0,0"/>
                    
                    <hc:NumericUpDown Value="{Binding Width}"
                                      ValueFormat="N3" 
                                      Maximum="2"
                                      Minimum="0"
                                      Increment="0.01"
                                      hc:InfoElement.TitleWidth="160" 
                                      hc:InfoElement.Placeholder="Please enter the content" 
                                      hc:InfoElement.TitlePlacement="Left" 
                                      hc:InfoElement.Title="Ширина контура, мм" 
                                      Style="{StaticResource NumericUpDownExtend}" 
                                      Margin="0,3,0,0"/>
                </StackPanel>
            </DataTemplate>

            <Style x:Key="CornerButton" TargetType="Button" >
                <Setter Property="Button.Background">
                    <Setter.Value>
                        <SolidColorBrush Color="#FFC2C3C9" />
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Visibility}" Value="Visible">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation 
                                        Storyboard.TargetProperty="(Button.Background).(SolidColorBrush.Color)"
                                         From="#FFC2C3C9" To="#FF94F909" Duration="0:0:0.5" RepeatBehavior="2x" AutoReverse="True" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="CirclePanelButton" BasedOn="{StaticResource ButtonCustom}" TargetType="Button">
                <Setter Property="UseLayoutRounding" Value="False"/>
                <Setter Property="Height" Value="77"/>
                <Setter Property="Width" Value="36.06"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Grid>
                                <Path Data="{StaticResource CirclePanelDemoGeometry}" Fill="{DynamicResource PrimaryBrush}" Height="77" Width="36.06"/>
                                <Path Data="{StaticResource CirclePanelRightGeometry}" Stretch="Uniform" Margin="12" Fill="White"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" Value=".9"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Opacity" Value=".6"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.4"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="CircularButton" BasedOn="{StaticResource ButtonCustom}" TargetType="Button">
                <Setter Property="UseLayoutRounding" Value="False"/>
                <Setter Property="Height" Value="77"/>
                <Setter Property="Width" Value="36.06"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Grid>
                                <Path Data="{StaticResource CenterGeometry}" Stretch="Uniform" Fill="{DynamicResource PrimaryBrush}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" Value=".9"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Opacity" Value=".6"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.4"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="CircArrowButton" BasedOn="{StaticResource ButtonCustom}" TargetType="Button">
                <Setter Property="UseLayoutRounding" Value="False"/>
                <Setter Property="Height" Value="77"/>
                <Setter Property="Width" Value="36.06"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Grid>
                                <Path Data="{StaticResource CircleArrowGeometry}" Stretch="Uniform" Fill="{DynamicResource PrimaryBrush}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" Value=".9"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Opacity" Value=".6"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.4"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="MirrorButton" BasedOn="{StaticResource ButtonCustom}" TargetType="Button">
                <Setter Property="UseLayoutRounding" Value="False"/>
                <Setter Property="Height" Value="77"/>
                <Setter Property="Width" Value="36.06"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Grid>
                                <Path Data="{StaticResource MirrorGeometry}" Stretch="Uniform" StrokeThickness="2" Stroke="{StaticResource BorderBrush}" Fill="{DynamicResource PrimaryBrush}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" Value=".9"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Opacity" Value=".6"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.4"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="PlayButton" BasedOn="{StaticResource ButtonDefault}" TargetType="Button">
                <Setter Property="Content">
                    <Setter.Value>
                            <Path Data="{StaticResource PlaySignGeometry}" Stretch="UniformToFill"  Fill="{DynamicResource SuccessBrush}">
                                
                            </Path>
                    </Setter.Value>
                </Setter>                
            </Style>
        </ResourceDictionary>        
    </Application.Resources>
</Application>
