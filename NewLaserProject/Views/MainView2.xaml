<hc:GlowWindow
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mcl="clr-namespace:MachineClassLibrary.Machine;assembly=MachineClassLibrary"    
        xmlns:local="clr-namespace:NewLaserProject.Views"
        xmlns:hc="https://handyorg.github.io/handycontrol" 
        xmlns:uc="clr-namespace:MachineControlsLibrary.Controls;assembly=MachineControlsLibrary"         
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors" 
        xmlns:cnvrt="clr-namespace:MachineControlsLibrary.Converters;assembly=MachineControlsLibrary"
        xmlns:clr="clr-namespace:System;assembly=mscorlib"
        xmlns:Localconverters="clr-namespace:NewLaserProject.Views.Converters"
        xmlns:vm="clr-namespace:NewLaserProject.ViewModels"    
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" x:Class="NewLaserProject.Views.MainView2"
        xmlns:uclocal="clr-namespace:NewLaserProject.UserControls"
        xmlns:selectors ="clr-namespace:NewLaserProject.Views.Selectors"
    
        mc:Ignorable="d"
        
        ActiveGlowColor="{DynamicResource PrimaryColor}"
    
        Title="Лазер" Height="450" Width="800" WindowState="Maximized">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="KeyDown">
            <i:InvokeCommandAction Command="{Binding KeyDownCommand, Mode=OneWay}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
        <i:EventTrigger EventName="KeyUp">
            <i:InvokeCommandAction Command="{Binding KeyUpCommand, Mode=OneWay}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.Resources>
        <Localconverters:LayersTreeStructureConvereter x:Key="LTreeStructureConverter"/>
        <Localconverters:LayersStructureConvereter x:Key="LStructureConvereter"/>
        <Localconverters:TextToEntityConverter x:Key="TextToEntityConverter"/>
        <CollectionViewSource x:Key="MaterialSource" Source="{Binding AvailableMaterials}"/>
        <CollectionViewSource x:Key="FileLayers" Source="{Binding LayGeoms}"/>
        <CollectionViewSource x:Key="FileStructure" Source="{Binding LayersStructure, Converter={StaticResource LStructureConvereter}}"/>

        <cnvrt:DivideConverter x:Key="DivideConverter"/>
        <cnvrt:MulConvereter x:Key="MulConvereter"/>
        <cnvrt:BoolToVisibleConvereter x:Key="BoolToVisibleConvereter"/>
        
        <Localconverters:AligningArgsConverter x:Key="AligningArgsConverters"/>
        <clr:Boolean x:Key="TRUE">True</clr:Boolean>
        <clr:Boolean x:Key="FALSE">False</clr:Boolean>
        <selectors:LaserEntityDataSelector x:Key="EntitySelector"/>

        <Storyboard x:Key="DangerMessage">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ImportantIcon"
                                           Storyboard.TargetProperty="Visibility"
                                           
                                           Duration="0:0:1" RepeatBehavior="5x" FillBehavior="Stop"
                                           >
                <ObjectAnimationUsingKeyFrames.KeyFrames>
                    <DiscreteObjectKeyFrame KeyTime="0:0:0.8" Value="{x:Static Visibility.Hidden}"/>
                </ObjectAnimationUsingKeyFrames.KeyFrames>
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="ExclaimMessage">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ImportantMessage"  Storyboard.TargetProperty="Visibility">
                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" />
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimation Storyboard.TargetName="ImportantMessage" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.5"/>
        </Storyboard>
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="90*"/>
            <ColumnDefinition Width="43*"/>
        </Grid.ColumnDefinitions>
        <ToolBarTray Margin="1" Orientation="Vertical" VerticalAlignment="Stretch">

            <ToolBar>
                <ToolBar.Resources>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    </Style>
                </ToolBar.Resources>
                <Button Command="{Binding TestCommand}" Style="{StaticResource PlayButton}" HorizontalAlignment="Stretch"/>
                <!--<Button Content="PAZ" Command="{Binding StartThreePointProcessCommand}"/>
                <Button Content="Next" Command="{Binding TPProcessNextCommand}"/>-->
                <Button hc:IconElement.Geometry="{StaticResource SpurGearGeometry}"
                        hc:IconElement.Width="15"
                        Command="{Binding MachineSettingsCommand}" 
                        HorizontalAlignment="Stretch">
                    <Button.ToolTip>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Настройки приводов"/>
                            <TextBlock Foreground="Blue" FontWeight="DemiBold"  Text=" H"/>
                        </StackPanel>
                    </Button.ToolTip>
                </Button>

                <hc:SplitButton hc:IconElement.Geometry="{StaticResource AcademicHatGeometry}" HorizontalAlignment="Stretch">
                    <hc:SplitButton.DropDownContent>
                        <StackPanel>
                            <MenuItem Command="{Binding TeachCameraOffsetCommand}" Header="Смещение камеры" InputGestureText="F2">
                                <MenuItem.Icon>
                                    <Image Source="Sources/distance-32.png" Height="20" RenderTransformOrigin="0.5,0.5"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Command="{Binding TeachScanatorHorizontCommand}" Header="Горизонт сканатора" InputGestureText="F3">
                                <MenuItem.Icon>
                                    <Image Source="Sources/angle.png" Height="20" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Command="{Binding TeachOrthXYCommand}" Header="Ортогональность XY" InputGestureText="F4">
                                <MenuItem.Icon>
                                    <Image Source="Sources/orth.png" Height="20"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Command="{Binding TeachCameraScaleCommand}" Header="Масштаб видео" InputGestureText="F5">
                                <MenuItem.Icon>
                                    <Image Source="Sources/scale.png" Height="20"/>
                                </MenuItem.Icon>
                            </MenuItem>
                        </StackPanel>
                    </hc:SplitButton.DropDownContent>
                    <!--<Image Source="Sources/learning.png"/>-->
                </hc:SplitButton>
            </ToolBar>
            <ToolBar>
                <Button Command="{Binding ChooseMaterialCommand}" MinHeight="50">
                    <hc:AdornerElement.Instance>
                        <hc:Poptip Content="Введите параметры подложки" PlacementType="TopLeft"/>
                    </hc:AdornerElement.Instance>
                    <StackPanel HorizontalAlignment="Center">
                        <TextBlock Text="Подложка" Style="{StaticResource TextBlockDefaultBold}" Margin="0,0,0,3"/>

                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" >
                            <TextBlock Text="{Binding WaferWidth}" Style="{DynamicResource TextBlockDefaultPrimary}"/>
                            <TextBlock Text="X" Style="{StaticResource TextBlockDefaultPrimary}"/>
                            <TextBlock Text="{Binding WaferHeight}" Style="{StaticResource TextBlockDefaultPrimary}"/>
                            <TextBlock Text="X" Style="{StaticResource TextBlockDefaultPrimary}"/>
                            <TextBlock Text="{Binding WaferThickness}" Style="{StaticResource TextBlockDefaultPrimary}"/>
                        </StackPanel>
                    </StackPanel>


                </Button>
            </ToolBar>
        </ToolBarTray>
        <TabControl Margin="1" Grid.Column="1">            
            <TabItem>                
                <TabItem.Header>
                    <Border BorderBrush="CadetBlue" Margin="0,0,10,0" CornerRadius="4" BorderThickness="1" DockPanel.Dock="Top" HorizontalAlignment="Left">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                            <TextBlock Text="{Binding DataContext.FileName, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                                           hc:InfoElement.Placeholder="Open file"
                                           Width="100" 
                                           Margin="2" 
                                           Background="LightYellow"/>
                            <Button Command="{Binding OpenFileCommand}" Content="Файл" Style="{StaticResource ButtonPrimary.Small}" />
                        </StackPanel>
                    </Border>
                </TabItem.Header>
                <TabItem.InputBindings>
                    <KeyBinding Command="{Binding TestCommand}" Key="Q"/>
                    <KeyBinding Command="{Binding StartProcessCommand}" Key="Divide"/>

                    <KeyBinding Command="{Binding MachineSettingsCommand}" Modifiers="Ctrl" Key="H"/>

                    <KeyBinding Command="{Binding GoLeftCommand}" Key="X"/>
                    <KeyBinding Command="{Binding GoRightCommand}" Key="C"/>
                    <KeyBinding Command="{Binding GoUpCommand}" Key="A"/>
                    <KeyBinding Command="{Binding GoDownCommand}" Key="Z"/>

                    <KeyBinding Command="{Binding TeachCameraOffsetCommand}" Key="F2"/>
                    <KeyBinding Command="{Binding TeachScanatorHorizontCommand}" Key="F3"/>
                    <KeyBinding Command="{Binding TeachOrthXYCommand}" Key="F4"/>
                    <KeyBinding Command="{Binding TeachCameraScaleCommand}" Key="F5"/>

                    <KeyBinding Command="{Binding WaferCornersTeachCommand}" CommandParameter="{StaticResource TRUE}" Key="F6"/>
                    <KeyBinding Command="{Binding WaferCornersTeachCommand}" CommandParameter="{StaticResource FALSE}" Key="F7"/>

                    <KeyBinding Command="{Binding TeachNextCommand}" Key="Multiply"/>
                    <KeyBinding Command="{Binding TeachDenyCommand}" Key="Esc"/>
                </TabItem.InputBindings>
                <Grid>
                    <uc:GraphWindow                         
                           x:Name="GraphWin"
                           LayGeoms="{Binding DataContext.LayGeoms, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"                                            
                           SpecSizeX="{Binding DataContext.FileSizeX, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                           SpecSizeY="{Binding DataContext.FileSizeY, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                           FieldSizeX="{Binding DataContext.FieldSizeX, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                           FieldSizeY="{Binding DataContext.FieldSizeY, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                           SpecMargin="0.2" 
                           AutoProportion="True"
                           StrokeThickness="0.1"  
                           IgnoredLayers="{Binding DataContext.IgnoredLayers, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" 
                           RenderTransformOrigin="0.5,0.5"
                           SelectedColor="Black"           
                           MirrorX="{Binding DataContext.MirrorX, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                           Angle90="{Binding DataContext.WaferTurn90, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                           OffsetX="{Binding DataContext.WaferOffsetX, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"                           
                           OffsetY="{Binding DataContext.WaferOffsetY, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" 
                           PointerDiameter="2000"
                           PointerThickness="2"
                           PointerX="{Binding DataContext.TeacherPointerX, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                           PointerY="{Binding DataContext.TeacherPointerY, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                           PointerVisibility="{Binding DataContext.TeacherPointerVisibility, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}"
                           >
                        <!--PointerX="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.TeacherPointerX}"
                           PointerY="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.TeacherPointerY}"
                           PointerVisibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}, Path=DataContext.TeacherPointerVisibility}"-->

                        <Grid>
                            <uc:SpecCross 
                                    X="{Binding DataContext.CameraViewfinderX, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" 
                                    Y="{Binding DataContext.CameraViewfinderY, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" 
                                    Color="LightGreen"                                
                                    XScale="{Binding ScaleX, RelativeSource={RelativeSource AncestorType={x:Type uc:GraphWindow}, Mode=FindAncestor}}" 
                                    YScale="{Binding ScaleY, RelativeSource={RelativeSource AncestorType={x:Type uc:GraphWindow}, Mode=FindAncestor}}"
                                    OffsetX="{Binding MarginX, RelativeSource={RelativeSource AncestorType={x:Type uc:GraphWindow}, Mode=FindAncestor}}" 
                                    OffsetY="{Binding MarginY, RelativeSource={RelativeSource AncestorType={x:Type uc:GraphWindow}, Mode=FindAncestor}}"                                     
                                    Thickness="1">
                                <uc:SpecCross.RenderTransform>
                                    <ScaleTransform ScaleY="-1" 
                                                CenterY="{Binding ActualHeight, ConverterParameter=2, Converter={StaticResource DivideConverter}, RelativeSource={RelativeSource AncestorType={x:Type uc:SpecCross}, Mode=FindAncestor}}"/>
                                </uc:SpecCross.RenderTransform>
                            </uc:SpecCross>
                            <uc:SpecCross 
                                    X="{Binding DataContext.LaserViewfinderX, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" 
                                    Y="{Binding DataContext.LaserViewfinderY, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" 
                                    Color="OrangeRed"                               
                                    XScale="{Binding ScaleX, RelativeSource={RelativeSource AncestorType={x:Type uc:GraphWindow}, Mode=FindAncestor}}" 
                                    YScale="{Binding ScaleY, RelativeSource={RelativeSource AncestorType={x:Type uc:GraphWindow}, Mode=FindAncestor}}"
                                    OffsetX="{Binding MarginX, RelativeSource={RelativeSource AncestorType={x:Type uc:GraphWindow}, Mode=FindAncestor}}" 
                                    OffsetY="{Binding MarginY, RelativeSource={RelativeSource AncestorType={x:Type uc:GraphWindow}, Mode=FindAncestor}}"                                     
                                    Thickness="1">
                                <uc:SpecCross.RenderTransform>
                                    <ScaleTransform ScaleY="-1" 
                                                CenterY="{Binding ActualHeight, ConverterParameter=2, Converter={StaticResource DivideConverter}, RelativeSource={RelativeSource AncestorType={x:Type uc:SpecCross}, Mode=FindAncestor}}"/>
                                </uc:SpecCross.RenderTransform>
                            </uc:SpecCross>
                        </Grid>
                    </uc:GraphWindow>
                    <Grid x:Name="CircleGrid" Opacity="0.2" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseEnter">
                                <i:ControlStoryboardAction>
                                    <i:ControlStoryboardAction.Storyboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="CircleGrid" 
                                                 Storyboard.TargetProperty="Opacity" 
                                                 Duration="0:0:0.1"
                                                 FillBehavior="HoldEnd"
                                                 By="1"
                                                 />
                                        </Storyboard>
                                    </i:ControlStoryboardAction.Storyboard>
                                </i:ControlStoryboardAction>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="MouseLeave">
                                <i:ControlStoryboardAction>
                                    <i:ControlStoryboardAction.Storyboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="CircleGrid" 
                                                 Storyboard.TargetProperty="Opacity" 
                                                 BeginTime="0:0:1"
                                                 Duration="0:0:1"                                                             
                                                 FillBehavior="HoldEnd"
                                                 To="0.2"
                                                 />
                                        </Storyboard>
                                    </i:ControlStoryboardAction.Storyboard>
                                </i:ControlStoryboardAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Button Command="{Binding AlignWaferCommand}" Style="{StaticResource CircularButton}">
                            <Button.CommandParameter>
                                <MultiBinding Converter="{StaticResource AligningArgsConverters}">
                                    <Binding ElementName="GraphWin" Path="ScaleX"/>
                                    <Binding ElementName="GraphWin" Path="ScaleY"/>
                                    <Binding Source="{x:Static vm:Aligning.Center}"/>
                                </MultiBinding>
                            </Button.CommandParameter>
                        </Button>
                        <Button Command="{Binding ChangeMirrorXCommand}" Style="{StaticResource MirrorButton}" RenderTransformOrigin="0.5 0.5">
                            <Button.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0.5" ScaleY="-0.5"/>
                                </TransformGroup>
                            </Button.RenderTransform>
                        </Button>
                        <Button Command="{Binding ChangeTurn90Command}" Style="{StaticResource CircArrowButton}" RenderTransformOrigin="0.5 0.5">
                            <Button.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1.7" ScaleY="-1.7"/>
                                    <TranslateTransform Y="-3"/>
                                </TransformGroup>
                            </Button.RenderTransform>
                        </Button>
                        <hc:CirclePanel x:Name="CirclePanel"
                            Grid.Column="1"
                            Diameter="180"
                            VerticalAlignment="Bottom"
                            HorizontalAlignment="Right"
                            Margin="20"
                            >

                            <hc:CirclePanel.LayoutTransform>
                                <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
                            </hc:CirclePanel.LayoutTransform>


                            <Button Command="{Binding AlignWaferCommand}" Style="{StaticResource CirclePanelButton}">
                                <Button.CommandParameter>
                                    <MultiBinding Converter="{StaticResource AligningArgsConverters}">
                                        <Binding ElementName="GraphWin" Path="ScaleX"/>
                                        <Binding ElementName="GraphWin" Path="ScaleY"/>
                                        <Binding Source="{x:Static vm:Aligning.Right}"/>
                                    </MultiBinding>
                                </Button.CommandParameter>
                            </Button>
                            <Button Command="{Binding AlignWaferCommand}" Style="{StaticResource CirclePanelButton}">
                                <Button.CommandParameter>
                                    <MultiBinding Converter="{StaticResource AligningArgsConverters}">
                                        <Binding ElementName="GraphWin" Path="ScaleX"/>
                                        <Binding ElementName="GraphWin" Path="ScaleY"/>
                                        <Binding Source="{x:Static vm:Aligning.RBCorner}"/>
                                    </MultiBinding>
                                </Button.CommandParameter>
                            </Button>
                            <Button Command="{Binding AlignWaferCommand}" Style="{StaticResource CirclePanelButton}">
                                <Button.CommandParameter>
                                    <MultiBinding Converter="{StaticResource AligningArgsConverters}">
                                        <Binding ElementName="GraphWin" Path="ScaleX"/>
                                        <Binding ElementName="GraphWin" Path="ScaleY"/>
                                        <Binding Source="{x:Static vm:Aligning.Bottom}"/>
                                    </MultiBinding>
                                </Button.CommandParameter>
                            </Button>
                            <Button Command="{Binding AlignWaferCommand}" Style="{StaticResource CirclePanelButton}">
                                <Button.CommandParameter>
                                    <MultiBinding Converter="{StaticResource AligningArgsConverters}">
                                        <Binding ElementName="GraphWin" Path="ScaleX"/>
                                        <Binding ElementName="GraphWin" Path="ScaleY"/>
                                        <Binding Source="{x:Static vm:Aligning.LBCorner}"/>
                                    </MultiBinding>
                                </Button.CommandParameter>
                            </Button>
                            <Button Command="{Binding AlignWaferCommand}" Style="{StaticResource CirclePanelButton}">
                                <Button.CommandParameter>
                                    <MultiBinding Converter="{StaticResource AligningArgsConverters}">
                                        <Binding ElementName="GraphWin" Path="ScaleX"/>
                                        <Binding ElementName="GraphWin" Path="ScaleY"/>
                                        <Binding Source="{x:Static vm:Aligning.Left}"/>
                                    </MultiBinding>
                                </Button.CommandParameter>
                            </Button>
                            <Button Command="{Binding AlignWaferCommand}" Style="{StaticResource CirclePanelButton}">
                                <Button.CommandParameter>
                                    <MultiBinding Converter="{StaticResource AligningArgsConverters}">
                                        <Binding ElementName="GraphWin" Path="ScaleX"/>
                                        <Binding ElementName="GraphWin" Path="ScaleY"/>
                                        <Binding Source="{x:Static vm:Aligning.LTCorner}"/>
                                    </MultiBinding>
                                </Button.CommandParameter>
                            </Button>
                            <Button Command="{Binding AlignWaferCommand}" Style="{StaticResource CirclePanelButton}">
                                <Button.CommandParameter>
                                    <MultiBinding Converter="{StaticResource AligningArgsConverters}">
                                        <Binding ElementName="GraphWin" Path="ScaleX"/>
                                        <Binding ElementName="GraphWin" Path="ScaleY"/>
                                        <Binding Source="{x:Static vm:Aligning.Top}"/>
                                    </MultiBinding>
                                </Button.CommandParameter>
                            </Button>
                            <Button Command="{Binding AlignWaferCommand}" Style="{StaticResource CirclePanelButton}">
                                <Button.CommandParameter>
                                    <MultiBinding Converter="{StaticResource AligningArgsConverters}">
                                        <Binding ElementName="GraphWin" Path="ScaleX"/>
                                        <Binding ElementName="GraphWin" Path="ScaleY"/>
                                        <Binding Source="{x:Static vm:Aligning.RTCorner}"/>
                                    </MultiBinding>
                                </Button.CommandParameter>
                            </Button>



                        </hc:CirclePanel>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="Мастер технологий" TabIndex="1">
                <i:Interaction.Triggers>
                    <i:DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsSelected}" 
                                   Value="True">
                        <i:InvokeCommandAction Command="{Binding DbLoadCommand}"/>
                    </i:DataTrigger>                    
                </i:Interaction.Triggers>                
                <DockPanel>
                    <ContentControl Content="{Binding LaserDbVM}"/>
                </DockPanel>
            </TabItem>
            <TabItem Header="Настройки" TabIndex="2">
                <i:Interaction.Triggers>
                    <i:DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsSelected}" 
                                   Value="True">
                        <i:InvokeCommandAction Command="{Binding AppSettingsOpenCommand}"/>
                    </i:DataTrigger>
                    <i:DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsSelected}" 
                                   Value="False">
                        <i:InvokeCommandAction Command="{Binding AppSettingsCloseCommand}"/>
                    </i:DataTrigger>
                </i:Interaction.Triggers>
                <ContentControl Content="{Binding AppSngsVM}"/>
            </TabItem>
        </TabControl>
        <DockPanel Grid.Column="2" VerticalAlignment="Stretch" LastChildFill="False">
            <Border x:Name="ImportantMessage"
                    DockPanel.Dock="Top"
                    VerticalAlignment="Top"
                    BorderThickness="2" 
                    BorderBrush="Blue"
                    Padding="2"
                    CornerRadius="3"
                    Height="30"
                Margin="1"
                    >
                <DockPanel>
                    <Image x:Name="ImportantIcon" Source="{Binding IconPath}" DockPanel.Dock="Left" Margin="0,0,5,0"/>
                    <TextBlock x:Name="ImportantText" Text="{Binding TechInfo}" FontWeight="Bold" FontSize="15" Foreground="Red">
                        <i:Interaction.Triggers>
                            <i:PropertyChangedTrigger Binding="{Binding Text, ElementName=ImportantText}">
                                <i:ControlStoryboardAction Storyboard="{StaticResource DangerMessage}"/>                                
                            </i:PropertyChangedTrigger>
                        </i:Interaction.Triggers>
                    </TextBlock>
                </DockPanel>
            </Border>
            <hc:SimplePanel DockPanel.Dock="Top">
                <Expander ExpandDirection="Down" IsExpanded="{Binding ShowVideo}">
                    <Border VerticalAlignment="Top" Background="{DynamicResource RegionBrush}" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource BorderBrush}">
                        <Grid>
                            <Image x:Name="VideoCamera" Panel.ZIndex="1" Source="{Binding CameraImage}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseDown" >
                                        <i:InvokeCommandAction Command="{Binding VideoClickCommand}" 
                                                       PassEventArgsToCommand="True"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Image>
                            <Canvas VerticalAlignment="Stretch" Panel.ZIndex="1">
                                <Line Stroke="Red" Fill="Red" 
                              StrokeThickness="1" 
                              X1="-25" X2="25" Y1="0" Y2="0" 
                              Canvas.Left="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualWidth, Converter={StaticResource DivideConverter}, ConverterParameter=2}" 
                              Canvas.Top="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualHeight, Converter={StaticResource DivideConverter}, ConverterParameter=2}" 
                              />
                                <Line Stroke="Red" Fill="Red" 
                              StrokeThickness="1" 
                              X1="0" X2="0" Y1="-25" Y2="25" 
                              Canvas.Left="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualWidth, Converter={StaticResource DivideConverter}, ConverterParameter=2}" 
                              Canvas.Top="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualHeight, Converter={StaticResource DivideConverter}, ConverterParameter=2}" 
                              >
                                </Line>

                                <Ellipse Width="25" Height="25" StrokeThickness="1" Stroke="Red"
                                
                                  Canvas.Left="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualWidth, Converter={StaticResource DivideConverter}, ConverterParameter=2}" 
                                  Canvas.Top="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualHeight, Converter={StaticResource DivideConverter}, ConverterParameter=2}" 
                                 >
                                    <Ellipse.RenderTransform>
                                        <TranslateTransform
                                    X="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Ellipse}, Path=ActualWidth, Converter={StaticResource DivideConverter}, ConverterParameter=-2}"
                                    Y="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Ellipse}, Path=ActualHeight, Converter={StaticResource DivideConverter}, ConverterParameter=-2}"
                                    
                                    />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Canvas>
                            <Canvas x:Name="ScaleMarkers" Panel.ZIndex="1" 
                            Visibility="{Binding Converter={StaticResource BoolToVisibleConvereter}, 
                        Path=TeachScaleMarkerEnable}">
                                <Line Stroke="Red" Fill="Red" 
                              StrokeThickness="1" 
                              X1="0" 
                              X2="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualWidth}" 
                              
                              Y2="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Y1}" 
                              >
                                    <Line.Y1>
                                        <MultiBinding Converter="{StaticResource MulConvereter}">
                                            <Binding RelativeSource="{RelativeSource AncestorType=Canvas, Mode=FindAncestor}" Path="ActualHeight"/>
                                            <Binding RelativeSource="{RelativeSource AncestorType=Window, Mode=FindAncestor}" Path="DataContext.ScaleMarkersRatioFirst"/>
                                        </MultiBinding>
                                    </Line.Y1>
                                </Line>
                                <Line Stroke="Red" Fill="Red" 
                              StrokeThickness="1" 
                              X1="0" 
                              X2="{Binding RelativeSource={RelativeSource AncestorType=Canvas, Mode=FindAncestor}, Path=ActualWidth}"                               
                              Y2="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Y1}" 
                              >
                                    <Line.Y1>
                                        <MultiBinding Converter="{StaticResource MulConvereter}">
                                            <Binding RelativeSource="{RelativeSource AncestorType=Canvas, Mode=FindAncestor}" Path="ActualHeight"/>
                                            <Binding RelativeSource="{RelativeSource AncestorType=Window, Mode=FindAncestor}" Path="DataContext.ScaleMarkersRatioSecond"/>
                                        </MultiBinding>
                                    </Line.Y1>
                                </Line>
                            </Canvas>
                        </Grid>
                    </Border>
                </Expander>
            </hc:SimplePanel>
            <DockPanel DockPanel.Dock="Top" HorizontalAlignment="Stretch">
                <!--<ContentControl DockPanel.Dock="Left" Content="{Binding LPModel}"/>-->
                <GroupBox Header="Текущий процесс" DockPanel.Dock="Top">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="36"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ComboBox ItemsSource="{Binding Source={StaticResource FileStructure}}"
                                     SelectedIndex="{Binding DefLayerIndex}"
                                     SelectedItem="{Binding CurrentLayerFilter}"
                                     >
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding LayerName}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <uclocal:ItemsButton x:Name="testname" Items="{Binding Source={StaticResource FileStructure}, Path=Entities}"
                                        ItemSelector="{StaticResource EntitySelector}"
                                        SelectedItem="{Binding CurrentEntityType, Mode=OneWayToSource}"
                                        SetIndex="{Binding DefEntityIndex}"
                                        Grid.Column="1"
                                        HorizontalAlignment="Stretch"
                                        />

                        <ComboBox x:Name="Materials"
                                     ItemsSource="{Binding Source={StaticResource MaterialSource}}" 
                                     SelectedIndex="{Binding DefMaterialIndex}"
                                     Grid.Column="2"
                                     >
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="{Binding Name}" Margin="0,0,10,0"/>
                                        <TextBlock Text="{Binding Thickness}"/>
                                    </StackPanel>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                        <ComboBox ItemsSource="{Binding Source={StaticResource MaterialSource}, 
                            Path=Technologies}"
                                  SelectedIndex="{Binding DefTechnologyIndex}"
                                     SelectedItem="{Binding CurrentTechnology}"  
                                     Grid.Column="3"                                  
                                     >
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="{Binding ProgramName}" Margin="0,0,10,0"/>
                                    </StackPanel>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <Button 
                                Command="{Binding StartProcessCommand}"
                                VerticalAlignment="Bottom"
                                Style="{StaticResource PlayButton}"
                                             Grid.Column="4"
                                
                                />
                        <TreeView Grid.Row="1" x:Name="LayersList" Height="150" 
                                  ItemsSource="{Binding LayersStructure, Converter={StaticResource LTreeStructureConverter}}">
                            <TreeView.ItemContainerStyle>
                                <Style TargetType="{x:Type TreeViewItem}">
                                    <Setter Property="IsExpanded" Value="True" />
                                </Style>
                            </TreeView.ItemContainerStyle>
                            <TreeView.Resources>
                                <HierarchicalDataTemplate DataType="{x:Type vm:Layer}" ItemsSource="{Binding Objects}">
                                    <TextBlock Text="{Binding Name}" Style="{DynamicResource TextBlockDefault}"/>
                                </HierarchicalDataTemplate>
                                <DataTemplate DataType="{x:Type vm:Text}">
                                    <StackPanel Orientation="Horizontal">  
                                        <!--<TextBlock Text="{Binding Value}" Foreground="White"/>-->
                                        <ContentControl Content="{Binding Value, Converter={StaticResource TextToEntityConverter}}" 
                                                        ContentTemplateSelector="{StaticResource EntitySelector}"/>
                                        <TextBlock Text=" [ " Style="{DynamicResource TextBlockDefaultPrimary}" />
                                        <TextBlock Text="{Binding Count}" Style="{DynamicResource TextBlockDefaultPrimary}"/>
                                        <TextBlock Text=" ]" Style="{DynamicResource TextBlockDefaultPrimary}"/>
                                    </StackPanel>
                                </DataTemplate>
                            </TreeView.Resources>
                        </TreeView>
                    </Grid>
                </GroupBox>
                <DataGrid DockPanel.Dock="Left" 
                      AutoGenerateColumns="False" 
                      ItemsSource="{Binding ProcessingObjects}"
                      SelectionMode="Single"
                      Height="100"
                      Style="{StaticResource DataGrid.Small}"
                      >
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding ProcGridSelectionCommand}"
                                           PassEventArgsToCommand="True"
                                           />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>

                    <DataGrid.ItemContainerStyle>
                        <Style TargetType="DataGridRow">
                            <Setter Property="IsSelected" Value="{Binding IsBeingProcessed}"/>
                        </Style>
                    </DataGrid.ItemContainerStyle>
                    <!--<DataGrid.RowHeaderTemplate>
                    <DataTemplate>
                        <CheckBox IsChecked="False"/>
                    </DataTemplate>
                </DataGrid.RowHeaderTemplate>-->
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Слой" Binding="{Binding LayerName}"/>
                        <DataGridTemplateColumn Header="Тип">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <ContentControl Content="{Binding}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="Координаты">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock >
                                        <Run Text="{Binding X, StringFormat='{}{0:#.}'}"/>
                                        <Run Text="&#215;"/>
                                        <Run Text="{Binding Y, StringFormat='{}{0:#.}'}"/>
                                    </TextBlock>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="Обработка">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="True"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTextColumn Header="Масштаб" Binding="{Binding Scale}"/>
                    </DataGrid.Columns>
                </DataGrid>
            </DockPanel>

            <hc:StepBar DockPanel.Dock="Top" Dock="Left" ItemsSource="{Binding TeachingSteps}" StepIndex="{Binding StepIndex}"/>

            <WrapPanel DockPanel.Dock="Bottom">
                <uc:AxisState CoordinateName="X" 
                                  Coordinate="{Binding XAxis.Position}"
                                  LmtNeg="{Binding XAxis.NLmt}"
                                  LmtPos="{Binding XAxis.PLmt}"
                                  MotionDone="{Binding XAxis.MotionDone}" 
                                  CmdCoordinate="{Binding XAxis.CmdPosition}"
                                  />
                <uc:AxisState CoordinateName="Y"
                                  Coordinate="{Binding YAxis.Position}"
                                  LmtNeg="{Binding YAxis.NLmt}"
                                  LmtPos="{Binding YAxis.PLmt}"
                                  MotionDone="{Binding YAxis.MotionDone}"
                                  CmdCoordinate="{Binding YAxis.CmdPosition}"
                                  />
                <uc:AxisState CoordinateName="Z"
                                  Coordinate="{Binding ZAxis.Position}"
                                  LmtNeg="{Binding ZAxis.NLmt}"
                                  LmtPos="{Binding ZAxis.PLmt}"
                                  MotionDone="{Binding ZAxis.MotionDone}"
                                  CmdCoordinate="{Binding ZAxis.CmdPosition}"
                                  />
                <TextBlock x:Name="VelText" Text="Быстро">
                        <i:Interaction.Triggers>
                            <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Fast}">
                                <i:ChangePropertyAction TargetObject="{Binding ElementName=VelText}" PropertyName="Text" Value="Быстро"/>
                            </i:DataTrigger>
                            <i:DataTrigger Binding="{Binding VelocityRegime}" Value="{x:Static mcl:Velocity.Slow}">
                                <i:ChangePropertyAction TargetObject="{Binding ElementName=VelText}" PropertyName="Text" Value="Медленно"/>
                            </i:DataTrigger>
                        </i:Interaction.Triggers>
                </TextBlock>
            </WrapPanel>
        </DockPanel>
    </Grid>
</hc:GlowWindow>
